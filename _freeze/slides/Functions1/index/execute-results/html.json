{
  "hash": "ebc712f632880cfe57c4849951146a97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Course - Day 3\"\nsubtitle: \"Functions I\"\nformat:\n  emc-revealjs:\n    toc: true\n    toc-depth: 1\n    menu: true\nexecute:\n  echo: true\ncategories: [Day3]\nimage: \"image.png\"\n---\n\n\n## Built-in Named Functions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead() #Print the first 6 lines of a dataframe\n\ntail() #Print the last 6 lines of a dataframe\n\nseq(from=1, to=10, by=2) #Create a sequence from 1 to 10 with steps of 2\n\nas.numeric(c(\"1\",\"2\",\"3\",\"4\")) #Turn string into numbers\n\nsort(c(3,4,2,5,1)) #Sort numbers or letters numerically or alphabetically\n\nmax(c(111,333,444,55,6,777,999)) #Determine the maximum value of a vector\n\nrnorm(10) #Sample 10 values from a r(andom) norm(al) distribution between 0 and 1\n```\n:::\n\n\nBuilt-in functions in base-R :\n\n<https://stat.ethz.ch/R-manual/R-patched/library/base/html/00Index.html>\n\n## Function arguments {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n***arguments***, the object in the parentheses `( )`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x^2 + 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n## Functions with multiple arguments {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(round)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, digits = 0) \nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nround(4.679, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.68\n```\n\n\n:::\n:::\n\n\n`digits` is optional and defaults to 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n## Named Argument Matching {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(x = 4.679, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.68\n```\n\n\n:::\n\n```{.r .cell-code}\nround(digits = 2, x = 4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.68\n```\n\n\n:::\n:::\n\n\nMixing is possible:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(4.679, digits=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.68\n```\n\n\n:::\n\n```{.r .cell-code}\nround(digits=2, 4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.68\n```\n\n\n:::\n:::\n\n\n## Creating your own functions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyFun <- function(arg1, arg2) {\n  ## Here you type expressions that use the arguments\n}\n\nmyFun(arg1, arg2)\n```\n:::\n\n\n## Example of a custom function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy <- function(x, y){\n  (x + y)/2\n}\n```\n:::\n\nWe can us it like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy(2,6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\nor\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy(x = 2,y = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n## Use `return()` in a function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy <- function(x, y){\n  z <- (x + y)/2\n  return(z)\n}\n\nmean_xy(x = 2, y = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n## Default return value {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy_2 <- function(x, y){\n  z <- (x + y)/2\n  x\n  z\n}\n\nmean_xy_2(x = 1, y = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\nx is not returned!\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_xy_3 <- function(x, y){\n  z <- x + y \n  return(x)\n  z\n}\n\nmean_xy_3(x = 1, y = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\nz is not returned!\n\n## Function with multiple input values {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_vector <- function(...){ \n  z <- mean(c(...))\n  return(z)\n} \n\nmean_vector(1,2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\nNo limit to number of inputs:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_vector(1,2,3,4,5,6,7,8,9,10) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n## Vector as an input to a function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_x <- function(x){ \n  z <- mean(x)\n  return(z)\n} \nx <- c(1,2,3,4,5)\nmean_x(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n## Build a custom function to clean data {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n:::\n\n\nCalculate mean of only the positive values (data cleaning)\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives <- function(x){\n  x.trim <- x[x >= 0]\n  out <- mean(x.trim)\n  return(out)\n}\n```\n:::\n\nPatient data:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$Ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  52  30  53  55  48  44  58  49  54  54  39  45  54  59  36 -50  40  48  30\n[20]  49  65  51  65  59  40\n```\n\n\n:::\n:::\n\n-50 is clearly wrong\n\n## Build a custom function to clean data {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives(data$Ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49.04167\n```\n\n\n:::\n:::\n\nIn stead of:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(data$Ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45.08\n```\n\n\n:::\n:::\n\n\n## Returning vectors {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives <- function(x){\n  x.trim <- x[x>=0]\n  out <- summary(x.trim)\n  return(out)\n}\n\nmy_descriptives(data$Ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  30.00   43.00   50.00   49.04   54.25   65.00 \n```\n\n\n:::\n:::\n\n\n## Returning multiple values {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nIt is not possible to use `return(x,y)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives2_wrong <- function(x){\n  x.trim <- x[x>0]\n  below0 <- sum(x<0)\n  meanX <- mean(x.trim)\n  return(below0, meanX)\n}\n\nmy_descriptives2_wrong(data$Ages)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in return(below0, meanX): multi-argument returns are not permitted\n```\n\n\n:::\n:::\n\n\n## Returning multiple values {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nTo return multiple values we use: `return(c(x,y))` or `return(list(x,y))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives2 <- function(x){\n  x.trim <- x[x>0]\n  below0 <- sum(x<0)\n  meanX <- mean(x.trim)\n  return(list(below0, meanX))\n}\n\nmy_descriptives2(data$Ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 49.04167\n```\n\n\n:::\n:::\n\n\n## Function environments and scoping {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nThe Top-Level (or Global) Environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nf <- function(y) {\n  d <- 3\n  return(d * (w + y))\n}\nenvironment(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<environment: R_GlobalEnv>\n```\n\n\n:::\n:::\n\n\nObjects in the Global Environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobjects()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Ages\"                   \"data\"                   \"f\"                     \n [4] \"mean_vector\"            \"mean_x\"                 \"mean_xy\"               \n [7] \"mean_xy_2\"              \"mean_xy_3\"              \"my_descriptives\"       \n[10] \"my_descriptives2\"       \"my_descriptives2_wrong\" \"PatientID\"             \n[13] \"w\"                      \"x\"                     \n```\n\n\n:::\n:::\n\n\n## Global and Local Variables {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`w` is a global variable\n\n`d` is a local variable to `f()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(y) {\n  d <- 3\n  return(d * (w + y))\n}\n\nf(y = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'd' not found\n```\n\n\n:::\n:::\n\n\n## Local preference over Global {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nd <- 4\n\nf <- function(y) {\n  d <- 3\n  return(d * (w + y))\n}\n\nf(y = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n## Local assignment of variables {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nd <- 4 # This value of d will remain unchanged.\n\nf <- function(y) {\n  d <- 3 # This doesnt affect the value of d in the global environment\n  return(d * (w + y))\n}\n\nf(y = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n## Nested Functions and the Scope Hierarchy {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nf <- function(y) {\n  d <- 3\n  h <- function() {\n    b <- 5\n    return(d * (w + y))\n  }\n  return(h())\n}\n```\n:::\n\n\n-   `w` is a global environment variable to `f()` and also to `h()`\n\n-   `y` and `d` are local variables to `f()`, but \"global\" to `h()`\n\n-   `b` is local to `h()`\n\n## Check local variables with `ls()` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nf <- function(y) {\n  d <- 3\n  h <- function() {\n    b <- 5\n    return(d * (w + y))\n  }\n  print(ls())\n  return(h())\n}\n\nf(y = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"d\" \"h\" \"y\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\nNote that `b` is not printed, as it is local to `h()`, but not to `f()`.\n\n## View environment: `environment()` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 2\nf <- function(y) {\n  d <- 3\n  h <- function() {\n    b <- 5\n    return(d * (w + y))\n  }\n  print(environment(h))\n  return(h())\n}\nf(y = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<environment: 0x000001cc7b1631c0>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\nShows location in computer memory\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}