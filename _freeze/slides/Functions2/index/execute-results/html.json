{
  "hash": "29d9069d85228fc74223f3c7d423d717",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Course - Day 3\"\nsubtitle: \"Functions II\"\nformat:\n  emc-revealjs:\n    toc: true\n    toc-depth: 1\n    menu: true\nexecute:\n  echo: true\ncategories: [Day3]\nimage: \"image.png\"\n---\n\n\n## If? Then! Else? {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nConditional execution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  statement1\n}\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  statement1\n} else {\n  statement2\n}\n```\n:::\n\n\n## Example {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\nif (x < 10) {\n  y <- 0\n}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nAnother example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x >= 10) {\n  y <- 1\n} else {\n  y <- 0\n}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n## If else on one line\n\nOneliner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if(x >= 10) 1 else 0\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nBeware!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if(x >= 10) 1 #no else\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n## Nested `if()` Statements {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`if` inside an `if`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(condition1) {\n  if(condition2) {\n    statement1 \n  } else {\n    statement2\n  }\n}\n```\n:::\n\n\n## Adding if else to the descriptives function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_descriptives <- function(x){\n  if(class(x) == \"numeric\"){\n    x.trim <- x[x>0]\n    summary(x.trim)\n  } else if (class(x) == \"factor\"){\n    x.trim <- droplevels(x[x!=-1])\n    table(x.trim)\n  }\n}\nmy_descriptives(data$Ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  23.00   36.75   43.00   45.71   53.50   71.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nmy_descriptives(data$Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx.trim\n 0  1 \n13 11 \n```\n\n\n:::\n:::\n\n\n## Stringing multiple if else together {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhatAnimalSound <- function(animal){\n  if(animal == \"cat\") {\n    return(\"Meow!\")\n  } else if (animal == \"frog\") {\n    return(\"Ribbit!\")\n  } else if (animal == \"dog\") {\n    return(\"Woof!\")\n  } else {\n    return(paste0(\"I don't know what sound a '\",animal,\"' makes...\"))\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhatAnimalSound(\"dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Woof!\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwhatAnimalSound(\"bird\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I don't know what sound a 'bird' makes...\"\n```\n\n\n:::\n:::\n\n\n## if-else on a vector: The `ifelse()` Function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight <- c(69, 71, 67, 66, 72, 71, 61, 65, 73, 70, 68, 74)\n\nif (height > 69){\n  print(\"tall\") \n} else {\n  print(\"short\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in if (height > 69) {: the condition has length > 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhtCategory <- ifelse(height > 69, yes = \"tall\", no = \"short\")\n\nhtCategory\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"short\" \"tall\"  \"short\" \"short\" \"tall\"  \"tall\"  \"short\" \"short\" \"tall\" \n[10] \"tall\"  \"short\" \"tall\" \n```\n\n\n:::\n:::\n\n\nFor more complicated cases we can use `apply()`\n\n## Terminating a function with returns, errors, and warnings {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nThe following functions are useful for terminating a function call or just printing a warning message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreturn()     # Terminate a function call and return a value\nstop()       # Terminate a function call and print an error message\nwarning()    # Print a warning message (without terminating the function call)\n```\n:::\n\n\n## Terminating a Function Call Using `return()` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmySign <- function(x) {\n  if(x < 0) return(\"Negative\")\n  if(x > 0) return(\"Positive\")\n  return(\"Zero\")\n}\n\nmySign(x = 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Positive\"\n```\n\n\n:::\n:::\n\n\nNote: `return(\"Zero\")` not reached\n\n## Terminating Using `stop()` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`stop()` means \"error\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyRatio <- function(x, y) {\n  if(y == 0) stop(\"Cannot divide by 0\")\n  return(x/y)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmyRatio(x = 3, y = 0)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in myRatio(x = 3, y = 0): Cannot divide by 0\n```\n\n\n:::\n:::\n\n\nNote: `return(x/y)` not reached\n\n## Printing a Warning Message Using `warning()` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`warning()` just prints a warning message.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyRatio <- function(x, y) {\n  if(y == 0) warning(\"Attempt made to divide by 0\")\n  return(x/y)\n}\n\nmyRatio(x = 3, y = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in myRatio(x = 3, y = 0): Attempt made to divide by 0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Inf\n```\n\n\n:::\n:::\n\n\nR can divide by zero, it returns special value `Inf`\n\n## Looping {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nRepeat (iterate) an R statement\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor() # Repeat a set of statements a specified number of times\nwhile() # Repeat a set of statements as long as a specified condition is met\nrepeat # Repeat a set of statements until a break command is encountered\n```\n:::\n\n\nStopping a loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreak # Terminate a loops iterations\nnext # Skip ahead to the next iteration\n```\n:::\n\n\n## Example `for`, `while` and `repeat` loops {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n::: columns\n\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:5) {\n  print(i^2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 1\nwhile(i <= 5) {\n  print(i^2)\n  i <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 1\nrepeat {\n  print(i^2)\n  i <- i + 1\n  if(i > 5) break\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n\n\n:::\n:::\n\n:::\n\n:::\n\n## for() Loops {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in sequence) {\n  statement1\n  statement2\n  .\n  .\n  .\n  statementq\n}\n```\n:::\n\n\n## \"Looping\" over a `data.frame` {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoins <- data.frame(Coin = c(\"penny\", \"quarter\", \"nickel\", \"quarter\", \"dime\", \"penny\"),\n                    Year = c(1943, 1905, 1889, 1960, 1937, 1900),\n                    Mint = c(\"Den\", \"SF\", \"Phil\", \"Den\", \"SF\", \"Den\"),\n                    Condition = c(\"good\", \"fair\", \"excellent\", \"good\", \"poor\", \"good\"),\n                    Value = c(12.00, 55.00, 300.00, 40.00, 18.00, 28.00),\n                    Price = c(15.00, 45.00, 375.00, 25.00, 20.00, 20.00))\ncoins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Coin Year Mint Condition Value Price\n1   penny 1943  Den      good    12    15\n2 quarter 1905   SF      fair    55    45\n3  nickel 1889 Phil excellent   300   375\n4 quarter 1960  Den      good    40    25\n5    dime 1937   SF      poor    18    20\n6   penny 1900  Den      good    28    20\n```\n\n\n:::\n:::\n\n\nCalculate the mean of each column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolMeans(coins)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in colMeans(coins): 'x' must be numeric\n```\n\n\n:::\n:::\n\n\n## Looping Over `data.frame` Columns {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- NULL\nfor(i in 1:ncol(coins)) {\n  if (is.numeric(coins[ , i])) {\n    means <- c(means, mean(coins[ , i]))\n  }\n}\n\nmeans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1922.33333   75.50000   83.33333\n```\n\n\n:::\n:::\n\n\n## Looping Over List Elements {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyList <- list(\n  w = c(4, 4, 5, 5, 6, 6),\n  x = c(\"a\", \"b\", \"c\"),\n  y = c(5, 10, 15),\n  z = c(\"r\", \"s\", \"t\", \"u\", \"v\")\n)\n\nlengths <- NULL\n\nfor(i in myList) {\n  print(i)\n  lengths <- c(lengths, length(i))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 4 5 5 6 6\n[1] \"a\" \"b\" \"c\"\n[1]  5 10 15\n[1] \"r\" \"s\" \"t\" \"u\" \"v\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlengths\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 3 3 5\n```\n\n\n:::\n:::\n\n\n## Using apply functions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nApplying a function to an object\n\n-   `apply()`\n-   `lapply()`\n-   `sapply()`\n-   `tapply()`\n\n## Using apply on matrices {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`apply()` requires 3 arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(apply)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (X, MARGIN, FUN, ..., simplify = TRUE) \nNULL\n```\n\n\n:::\n:::\n\n\n-   x: the data\n-   MARGIN: `1`, `2`, or `c(1,2)`\n-   function: the function to apply (without the `( )`)\n\n<!-- The apply function works by \"applying\" a specified function to an data object. It requires 3 arguments: the data, a so-called \"MARGIN\", and a function. The data can be a vector, data.frame or a matrix. The MARGIN indicates whether you want to apply the function to the rows or the columns of your data, or both. To apply the function to the rows the MARGIN should be 1, to apply it to the columns it should be 2 and to apply it to both it should be `c(1,2)`. The function can be an existing function, such as `sum()` or `mean()`, or your own custom function. -->\n\n## Applying a function on a matrix {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(1:25,nrow=5)\n\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    6   11   16   21\n[2,]    2    7   12   17   22\n[3,]    3    8   13   18   23\n[4,]    4    9   14   19   24\n[5,]    5   10   15   20   25\n```\n\n\n:::\n:::\n\n\nMargin 1 to apply to the rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mat, 1, max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 22 23 24 25\n```\n\n\n:::\n:::\n\n\nMargin 2 to apply to the columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mat, 2, max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 10 15 20 25\n```\n\n\n:::\n:::\n\n\n## Applying a function to each element: {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mat, c(1,2), sqrt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]     [,3]     [,4]     [,5]\n[1,] 1.000000 2.449490 3.316625 4.000000 4.582576\n[2,] 1.414214 2.645751 3.464102 4.123106 4.690416\n[3,] 1.732051 2.828427 3.605551 4.242641 4.795832\n[4,] 2.000000 3.000000 3.741657 4.358899 4.898979\n[5,] 2.236068 3.162278 3.872983 4.472136 5.000000\n```\n\n\n:::\n:::\n\n\nRemember:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]     [,3]     [,4]     [,5]\n[1,] 1.000000 2.449490 3.316625 4.000000 4.582576\n[2,] 1.414214 2.645751 3.464102 4.123106 4.690416\n[3,] 1.732051 2.828427 3.605551 4.242641 4.795832\n[4,] 2.000000 3.000000 3.741657 4.358899 4.898979\n[5,] 2.236068 3.162278 3.872983 4.472136 5.000000\n```\n\n\n:::\n:::\n\n\n## Using lapply on lists to return lists {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist <- list(matrix(1:16,nrow=4), matrix(1:9,nrow=3),matrix(1:4,nrow=2))\n\nlapply(mylist, dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 4 4\n\n[[2]]\n[1] 3 3\n\n[[3]]\n[1] 2 2\n```\n\n\n:::\n:::\n\n\n## lapply on a data.frame (list of lists) {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\"col1\"=c(1,1,1,1), \"col2\"=c(2,2,2,2), \"col3\"=c(3,3,3,3))\n\nlapply(df, sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$col1\n[1] 4\n\n$col2\n[1] 8\n\n$col3\n[1] 12\n```\n\n\n:::\n:::\n\n\n## Using lapply alternative: sapply {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\"Simplify\" lapply output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(mylist, dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    4    3    2\n[2,]    4    3    2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(df, sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncol1 col2 col3 \n   4    8   12 \n```\n\n\n:::\n:::\n\n\n## Using tapply on groups of data {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- data.frame(\"group\"=paste('grp',\n                          c(1,1,1,1,1,2,2,2,2,2),sep='-'), \n                       \"outcome\"=rnorm(10)) \n                      #10 random normally distributed values\npatients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   group    outcome\n1  grp-1 -0.7930061\n2  grp-1  0.4491819\n3  grp-1  0.4399118\n4  grp-1  0.8997570\n5  grp-1 -0.8043006\n6  grp-2 -0.1144139\n7  grp-2  0.1370383\n8  grp-2 -1.0170428\n9  grp-2  0.6118554\n10 grp-2  0.6728039\n```\n\n\n:::\n\n```{.r .cell-code}\ntapply(patients$outcome, patients$group, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     grp-1      grp-2 \n0.03830882 0.05804818 \n```\n\n\n:::\n:::\n\n\n## Multiple grouping variables possible {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- data.frame(\"group\"=paste('grp',c(1,1,1,1,1,2,2,2,2,2),sep='-'),\n                       \"serotype\"=c(\"A\",\"B\",\"A\",\"B\",\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"),\n                       \"outcome\"=rnorm(10))\n\ntapply(patients$outcome, list(patients$group, patients$serotype), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                A         B\ngrp-1  0.09293757 1.6339488\ngrp-2 -0.75751287 0.1602559\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}