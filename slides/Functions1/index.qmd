---
title: "R Course - Day 3"
subtitle: "Functions I"
format:
  emc-revealjs:
    toc: true
    toc-depth: 1
    menu: true
execute:
  echo: true
categories: [Day3]
image: "image.png"
---
## Functions {data-background="./_extensions/emc/www/triangle1.svg"}
- Functions: a set of expressions that carry out a specific task
- Task is only performed when the function is run
- R has a lot of built in functions
- Packages are just a collection of functions

## Built-in Named Functions {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, eval=FALSE}
str() #Print structure of an object
class() #Print class of an object
head() #First six elements/rows
tail() #Last six elements/rows
ls() #List all objects you made
seq(from=1, to=10, by=2) #Create a sequence
```

Built-in functions in base-R :

<https://stat.ethz.ch/R-manual/R-patched/library/base/html/00Index.html>

## Function arguments {data-background="./_extensions/emc/www/triangle1.svg"}

***arguments***, the object in the parentheses `( )`:

```{r}
sqrt(2)

```

or

```{r}
x <- 2
sqrt(x)
```

or

```{r}
sqrt(x^2 + 5)
```

## Functions with multiple arguments {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
args(round)

round(4.679, 2)
```

`digits` is optional and defaults to 0:

```{r}
round(4.679)
```

## Named Argument Matching {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
round(x = 4.679, digits = 2)
round(digits = 2, x = 4.679)
```

Mixing is possible:

```{r}
round(4.679, digits=2)
round(digits=2, 4.679)
```


## Creating your own functions {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, eval=FALSE}
myFun <- function(arg1, arg2) {
  ## Here you type expressions that use the arguments
}

myFun(arg1, arg2)
```

## A simple example {data-background="./_extensions/emc/www/triangle1.svg"}

Calculate a mean of two values

```{r}
mean_xy <- function(x, y){
  z <- (x + y)/2
  return(z)
}

```

```{r}
mean_xy(2,6)
```

or 

```{r}
mean_xy(x = 2, y = 6)
```


## Returning a value {data-background="./_extensions/emc/www/triangle1.svg"}

Either the last statement is returned or use `return()`
```{r}
mean_xy_2 <- function(x, y){
  z <- (x + y)/2
  x
  z
}

mean_xy_2(x = 1, y = 3) # x is ignored
```


```{r}
mean_xy_3 <- function(x, y){
  z <- x + y 
  return(x)
  z
}

mean_xy_3(x = 1, y = 3) # everything after `return` is ignored
```




## Function with multiple input values {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_vector <- function(...){ 
  z <- mean(c(...))
  return(z)
} 

mean_vector(1,2,3)
mean_vector(1,2,3,4,5,6,7,8,9,10) 
```

## Vectorized arguments {data-background="./_extensions/emc/www/triangle1.svg"}

Functions can be vectorized

```{r}
mean_x <- function(x){ 
  z <- mean(x)
  return(z)
} 

```

We can use a vector `x` for the function `mean_x`
```{r}
x <- c(1,2,3,4,5)
mean_x(x)

```

## Custom functions {data-background="./_extensions/emc/www/triangle1.svg"}


Custom function are useful if you have a set of commands you have to use multiple times.

1) Save time

2) Keep code concise

3) Less coding mistakes

## Example of custom function

Calculate a mean of the non-negative values in vector
```{r}
my_descriptives <- function(x){
  x.trim <- x[x>=0]
  out <- mean(x.trim)
  return(out)
}
```

```{r, echo=FALSE}
PatientID <- 1:25
Ages <- round(c(rnorm(15, mean = 45, sd = 10), -50, rnorm(9, mean = 45, sd = 10) ) )
data <- data.frame(PatientID = PatientID, Ages = Ages)
data$Sex <- as.factor(c(rbinom(24, 1, 0.5),-1))
```

A variable `Ages` has one negative value
```{r}
data$Ages
```

## Example of custom function

Run the custom function on `Ages`
```{r}
my_descriptives(data$Ages)
```

Compare the output with the standard function `mean`

```{r}

mean(data$Ages)
```


## Returning a vector{data-background="./_extensions/emc/www/triangle1.svg"}

Output of a function does not need to be a scalar

```{r}
my_descriptives <- function(x){
  x.trim <- x[x>=0]
  out <- summary(x.trim)
  return(out)
}

```


```{r}
my_descriptives(data$Ages)

```


## Returning multiple values {data-background="./_extensions/emc/www/triangle1.svg"}

Put multiple objects in an object container (list, array, etc.)


```{r}
my_descriptives2 <- function(x){
  x.trim <- x[x>0]
  below0 <- sum(x<0)
  meanX <- mean(x.trim)
  return(list(below0, meanX))
}
```

The function additionally returns how many values were negative.

```{r}
my_descriptives2(data$Ages)
```


## Default value of an argument

```{r}
calc4 <- function(x, y = 2){ 
  z1 <- x + y
  z2 <- x * y 
  return(c(z1, z2))
} 

calc4(x = 1) ## uses y = 2
calc4(x = 1, y = 3) ## overwrites default value of y
```

## If? Then! Else? {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, eval=FALSE}
if()    # Used to execute a statement only if the given condition
        # is met
else    # Used to specify an alternative statement to be executed 
        # if the condition given in if() isn't met
```

## If? Then! Else?

Conditional execution:

```{r, eval=FALSE}
if (condition) {
  statement1
}
```

or

```{r, eval=FALSE}
if (condition) {
  statement1
} else {
  statement2
}
```

## Example {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
x <- 5
if (x >= 10) {
  y <- 1
} else {
    y <- 0
}

y
```

Oneliner:

```{r}
y <- if(x >= 10) 1 else 0
y
```

Beware!

```{r}
y <- if(x >= 10) 1 #no else
y
```


## Nested `if()` Statements {data-background="./_extensions/emc/www/triangle1.svg"}

`if` inside an `if`

```{r, eval=FALSE}

if(condition1) {
  if(condition2) {
    statement1 
  } else {
    statement2
  }
}
```

## `if() else()` statements in functions

```{r, echo=FALSE}
PatientID <- 1:25
Ages <- round(c(rnorm(15, mean = 45, sd = 10), -50, rnorm(9, mean = 45, sd = 10) ) )
data <- data.frame(PatientID = PatientID, Ages = Ages)
data$Sex <- as.factor(c(rbinom(24, 1, 0.5),-1))
```

First check whether a variable is numeric or factor. Then report descriptives accordingly
```{r}
my_descriptives <- function(x){
  if(class(x) == "numeric"){
    x.trim <- x[x>0]
    summary(x.trim)
  } else if (class(x) == "factor"){
    x.trim <- droplevels(x[x!=-1])
    table(x.trim)
  }
}
```

## `if() else()` statements in functions


```{r}
my_descriptives(data$Ages)
my_descriptives(data$Sex)
```


Compare:

```{r}
summary(data$Ages)
table(data$Sex)
```

## Stringing multiple if else together {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
whatAnimalSound <- function(animal){
  if(animal == "cat") {
    return("Meow!")
  } else if (animal == "frog") {
    return("Ribbit!")
  } else if (animal == "dog") {
    return("Woof!")
  } else {
    return(paste0("I don't know what sound a '",animal,"' makes..."))
  }
}
```

```{r}
whatAnimalSound("dog")
whatAnimalSound("bird")
```

## if-else on a vector: The `ifelse()` Function {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, error=TRUE}
height <- c(69, 71, 67, 66, 72, 71, 61, 65, 73, 70, 68, 74)

if (height > 69){
  print("tall") 
} else {
  print("short")
}
```

```{r}
htCategory <- ifelse(height > 69, yes = "tall", no = "short")

htCategory
```

For more complicated cases we can use `apply()`


------------------------------------------------------------------------
