---
title: "R Course - Day 3"
subtitle: "Functions I"
format:
  emc-revealjs:
    toc: true
    toc-depth: 1
    menu: true
execute:
  echo: true
categories: [Day3]
image: "image.png"
---

## Built-in Named Functions {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, eval=FALSE}
head() #Print the first 6 lines of a dataframe

tail() #Print the last 6 lines of a dataframe

seq(from=1, to=10, by=2) #Create a sequence from 1 to 10 with steps of 2

as.numeric(c("1","2","3","4")) #Turn string into numbers

sort(c(3,4,2,5,1)) #Sort numbers or letters numerically or alphabetically

max(c(111,333,444,55,6,777,999)) #Determine the maximum value of a vector

rnorm(10) #Sample 10 values from a r(andom) norm(al) distribution between 0 and 1
```

Built-in functions in base-R :

<https://stat.ethz.ch/R-manual/R-patched/library/base/html/00Index.html>

## Function arguments {data-background="./_extensions/emc/www/triangle1.svg"}

***arguments***, the object in the parentheses `( )`:

```{r}
sqrt(2)

```

or

```{r}
x <- 2
sqrt(x)
```

or

```{r}
sqrt(x^2 + 5)
```

## Functions with multiple arguments {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
args(round)

round(4.679, 2)
```

`digits` is optional and defaults to 0:

```{r}
round(4.679)
```

## Named Argument Matching {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
round(x = 4.679, digits = 2)
round(digits = 2, x = 4.679)
```

Mixing is possible:

```{r}
round(4.679, digits=2)
round(digits=2, 4.679)
```

## Creating your own functions {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, eval=FALSE}
myFun <- function(arg1, arg2) {
  ## Here you type expressions that use the arguments
}

myFun(arg1, arg2)
```

## Example of a custom function {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_xy <- function(x, y){
  (x + y)/2
}
```
We can us it like this:

```{r}
mean_xy(2,6)
```
or
```{r}
mean_xy(x = 2,y = 6)
```

## Use `return()` in a function {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_xy <- function(x, y){
  z <- (x + y)/2
  return(z)
}

mean_xy(x = 2, y = 6)
```

## Default return value {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_xy_2 <- function(x, y){
  z <- (x + y)/2
  x
  z
}

mean_xy_2(x = 1, y = 3)
```
x is not returned!
```{r}
mean_xy_3 <- function(x, y){
  z <- x + y 
  return(x)
  z
}

mean_xy_3(x = 1, y = 3)
```
z is not returned!

## Function with multiple input values {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_vector <- function(...){ 
  z <- mean(c(...))
  return(z)
} 

mean_vector(1,2,3)
```
No limit to number of inputs:
```{r}
mean_vector(1,2,3,4,5,6,7,8,9,10) 
```

## Vector as an input to a function {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
mean_x <- function(x){ 
  z <- mean(x)
  return(z)
} 
x <- c(1,2,3,4,5)
mean_x(x)
```

## Build a custom function to clean data {data-background="./_extensions/emc/www/triangle1.svg"}

```{r, echo=FALSE}
PatientID <- 1:25
Ages <- round(c(rnorm(15, mean = 45, sd = 10), -50, rnorm(9, mean = 45, sd = 10) ) )
data <- data.frame(PatientID = PatientID, Ages = Ages)
data$Sex <- as.factor(c(rbinom(24, 1, 0.5),-1))
```

Calculate mean of only the positive values (data cleaning)
```{r}
my_descriptives <- function(x){
  x.trim <- x[x >= 0]
  out <- mean(x.trim)
  return(out)
}
```
Patient data:
```{r}
data$Ages
```
-50 is clearly wrong

## Build a custom function to clean data {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
my_descriptives(data$Ages)
```
In stead of:
```{r}
mean(data$Ages)
```

## Returning vectors {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
my_descriptives <- function(x){
  x.trim <- x[x>=0]
  out <- summary(x.trim)
  return(out)
}

my_descriptives(data$Ages)
```

## Returning multiple values {data-background="./_extensions/emc/www/triangle1.svg"}

It is not possible to use `return(x,y)`

```{r, error=T}
my_descriptives2_wrong <- function(x){
  x.trim <- x[x>0]
  below0 <- sum(x<0)
  meanX <- mean(x.trim)
  return(below0, meanX)
}

my_descriptives2_wrong(data$Ages)
```

## Returning multiple values {data-background="./_extensions/emc/www/triangle1.svg"}

To return multiple values we use: `return(c(x,y))` or `return(list(x,y))`

```{r}
my_descriptives2 <- function(x){
  x.trim <- x[x>0]
  below0 <- sum(x<0)
  meanX <- mean(x.trim)
  return(list(below0, meanX))
}

my_descriptives2(data$Ages)
```

## Function environments and scoping {data-background="./_extensions/emc/www/triangle1.svg"}

The Top-Level (or Global) Environment

```{r}
w <- 2
f <- function(y) {
  d <- 3
  return(d * (w + y))
}
environment(f)
```

Objects in the Global Environment:

```{r}
objects()
```

## Global and Local Variables {data-background="./_extensions/emc/www/triangle1.svg"}

`w` is a global variable

`d` is a local variable to `f()`

```{r, error=TRUE}
f <- function(y) {
  d <- 3
  return(d * (w + y))
}

f(y = 1)

d
```

## Local preference over Global {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
w <- 2
d <- 4

f <- function(y) {
  d <- 3
  return(d * (w + y))
}

f(y = 1)
```

## Local assignment of variables {data-background="./_extensions/emc/www/triangle1.svg"}

```{r}
w <- 2
d <- 4 # This value of d will remain unchanged.

f <- function(y) {
  d <- 3 # This doesnt affect the value of d in the global environment
  return(d * (w + y))
}

f(y = 1)

d
```
