---
title: "R course - Day 1"
subtitle: Introduction to R
author:
  name: Sten Willemsen
  affiliation: 
    - name: Erasmus MC
      department: Epidemiology
  orcid: 0000-0002-1675-2931
  email: s.willemsen@erasmusmc.nl
date: "04/07/2025"
date-format: long
format:
  emctemplatereveal-revealjs:
    toc: false
    toc-depth: 1
    chalkboard: true
    menu: true
---

```{r setup, include=FALSE}

library(survival)
library(knitr)
library(kableExtra)
library(dplyr)

pbc <- survival::pbc
pbcseq <- survival::pbcseq
```

# Introduction to R {data-background="./templateassets/lbback.svg" class="center"}


## Introduction to R {.triangledb}

[**Statistics**]{color="#0c2074"} have flourished in the recent years mainly due to the possibility of doing complex analysis using computers

::: {.boxspw}
 
The most valuable tool of a modern quantitative researcher is his/her personal computer

:::

* Analysts must not only learn how to use the software but also the ideas behind it
* Learning statistical modelling and algorithm is more important than learning a programming language

    
## Introduction to R (cont'd) {.triangledb}

* Many **statistical software packages exists** to do simple and specialized analysis


* The [**programming language R**]{color="#0c2074"}  is popular for data scientists

* **R** is a software environment for statistical computing and graphics
  - free and open source
  - extensive catalog of statistical and graphical methods
  

* **R** is mainly used in academia. However, many large companies also use **R** programming language, including healthcare industries but also Uber, Google, Airbnb, Facebook and so on
 

## Agenda {data-background="./templateassets/lbback.svg" class="center"}

* **Day 1:** 
  - Introduction
* **Day 2:** 
  - Data cleaning
  - Data visualization
* **Day 3:**
  - R functions
  - Statistical analysis
* **Day 4:**
  - Additional topics
  
## Program this morning {.triangledb}

<br>

- Introduction to R
- Basic use of R
- Common objects in R
- Indexing / Subsetting

## References {.triangledb}

* More books that use R (or S) can be found at:

- <http://www.r-project.org/doc/bib/R-books.html>, or
- <http://www.r-project.org/doc/bib/R-jabref.html>

* R ships with a number of helpful manuals 

* Other manuals and helpful material are available on-line via
CRAN: 
<http://cran.r-project.org/other-docs.html>


## What does R look like ? {.triangledb}

<br>
![](.\\assets-day1\\SS_R.PNG){fig-align="center" height="400px" }



## A brief history of R {.triangledb}

* **1993**: University of Auckland, New Zealand by Ross Ihaka and Robert Gentleman
* **1997**: R core Team was formed (20 members)
* **2000**: R 1.0.0 released
* **2004**: First international user conference in Vienna
* **2013**: 5,026 packages available
* **2017**: 10,875 packages available
* **Now**:  20,777 packages available


## Why learn R ? {.triangledb}

* **R** is a free software environment for statistical computing and graphics
* It compiles and runs on LINUX, Windows and MacOS
* Open source language
* Users are allowed to modify and redistribute the code
* Advanced statistical language
* Supports extensions
* Interfaces to other languages
* **Flexible and fun!**
  

## Where do I get R ? {.triangledb}
  - http://cran.r-project.org
  - choose your platform, e.g., Windows, Linux
    - e.g., for Windows: Windows $\rightarrow$ base $\rightarrow$ Download R 4.4.3 for Windows
    - Install 


  
## Packages  {.triangledb}

  - [**Packages**]{color="#e84720"} built for specific tasks
  - Download R packages from the CRAN web site $\rightarrow$ within R
    + Packages
    + [**Install**]{color="#afcc46"} package(s)*
    + Make you choice(s)
    + [**Load**]{color="##b281e2"} the package using `library()`. &emsp;  
    
(**note:** install does not mean load)

::: aside
*  alternatively  use use `install.packages()`
:::


    
## How to get help in R {.triangledb}

* [**Within R **]{color="#e84720"}
  - `help()` or `? invoke the on-line help file for the specified function
  - checking the FAQ
  - `help.search("topic")` or `??"topic"` (depends on the installed packages)
  - `RSiteSearch("topic")` (requires internet connection)

  
## How to get help in R (cont'd) {.triangledb}

::: {style="font-size: 90%;"}
  
* [**Online**]{color="#e84720"}
  - **R-help** (<https://stat.ethz.ch/mailman/listinfo/r-help> – mailing list)
  - **R-seek** (<http://www.rseek.org> – Google-like searched engine)
  - **CRAN Task Views** (<http://cran.r-project.org/web/views/> – categorization of packages)
  - **R related Blogs** (<http://www.r-bloggers.com/> – many useful illustrations of R and R packages)
  - **stackoverflow** Open community for developers (<https://stackoverflow.com/> – ask/answer a question)
  - **Big Book of R** (<https://www.bigbookofr.com/> collection of R books)
:::  

```{r}
#| echo: false
#| include: false

# SPW 31-05-2024: I removed two entries because they seemed to be out-of date / not working and the slide is full already feel free to add again 
#  - Crantastic (<http://crantastic.org/> – #categorization of packages + reviews)
#  - R4stats (<http://www.r4stats.com/> – examples of #basic R programs)
```

## Disadvantages of R {.triangledb }

* Appears intimidating to the first-time user
* Default Output is not so nice looking ([*but wait ultil Day 4*]{color="#e868686"})
* Exporting output is more difficult ([*we will also discuss this on Day 4*]{color="#e868686"})
* Cannot easily handle very big data sets ([*depends on the installed RAM*]{color="#e868686"})
* A lot of things are available but they are sometimes hard to find
* The quality of the available packages is greatly varying
* By default uses only one CPU at a time for most tasks ([*can be changed using packages*]{color="#e868686"}))

<div style="background-image: url('https://upload.wikimedia.org/wikipedia/commons/8/8e/Lol_2.png'); background-size: 50%; background-position: center; background-repeat: no-repeat; opacity: 0.15; position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 2;"></div>



## Summary {.triangledb}

* **R** is a great tool to explore and analyse data
* Several statistical methods can be performed with **R**
* It is important to understand the methods before applying them in **R**


::: {.boxcontainer}

<h3 syle="margin-left:1em">&emsp;How to use R</h3>

:::: {.boxinterior}

<ul style="margin-bottom:0px;">
<li style="margin-bottom:0px;"><strong>R</strong> uses <strong>packages</strong> that perform specific tasks
<ul>
<li><strong>Install</strong> package only once</li>
<li style="margin-bottom:0px;"><strong>Load</strong> package every time you open <strong>R</strong></li>
</ul></li>
</ul>

::::

:::


# Basic Use of R {data-background="./templateassets/lbback.svg" class="center"}



## In this Section {.triangledb}

* Using R / RStudio

* Examples with Data

* Getting Familiar with R

* Importing data and saving your work

* A lot of practice


## Using R {.triangledb}

* R is a command-based procedural language
  - write and execute [**commands**]{color="#afcc46"}
  - use and define [**functions**]{color="#e84720"}
  
* You may write the commands in the R console (Windows) or in a shell (Linux)

<br>

::: {.boxspw}

[**You will become more familiar with the syntax as you use it**]{color="#0c2074"}

:::

## Popular IDEs / GUIs  {.triangledb}

* Strongly advisable to use a suitable **text editor** or **GUI**- Some available options:
  - **Rstudio** (all major platforms; <http://www.rstudio.org/>)
  - **Visual Studio Code** (all platforms)
  - **Positron** (all platforms)
  - **Jupyter** (all platforms)
  - **Emacs** (w. ESS, all platforms)
  
  - for more check <https://r-dir.com/blog/2013/01/list-of-r-editors.html>
  
  
##  Using R / RStudio {.triangledb}

<br>

* For this course: [**Rstudio**]{color="#0c2074"} (<http://www.rstudio.org/>)
  - free
  - works fine in Windows, MacOS and Linux
  - makes working with R a lot more user friendly
  - helpful with errors
  - alternative output options
  
  
##  Using R / RStudio  {.triangledb}

<br>
<br>

* Can I use [**R**]{color="#e84720"} without [**Rstudio**]{color="#afcc46"}?

<br>

* Can I use [**Rstudio**]{color="#afcc46"} without [**R**]{color="#e84720"}?




## R commands {.triangledb}

* Elementary commands: [**expressions**]{colour="#e84720"} and [**assignments**]{colour="#afcc46}

* An [**expression**]{colour="#e84720"} given as command is evaluated printed and discarded

* An [**assignments**]{colour="#afcc46"} evaluates an [**expression**]{colour="#e84720"} and passes the value to a variable - the result is not automatically printed


## R commands  {.triangledb}

[**expression**]{colour="#e84720"} is given as a command,
```{r, eval = TRUE, include = TRUE, echo = TRUE}
1 + 1
```

 - The result is lost after execution
 - It cannot be viewed again unless the command is rerun.
 

<br>

 In order to store information, the [**expression**]{colour="#e84720"} should [**assign**]{color="#e84720"} the result of the command to a variable
 
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- 1 + 1
x
```


## Basic calculations  {.triangledb}

::: {.boxspw}

**You can use R as a calculator!**

:::

* Basic arithmetics
```{r, eval = FALSE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
+, -, *, /, ^
```

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
y <- 103473 + 100000
y
```

* Complicated arithmetics
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
y <- sqrt(log(5) + exp(1))
y
```

::: {.boxspw}

**Many functions exist can we can even define our own**

:::

## Practical Examples {.triangledb}

* In practice we often work with data sets and other data structures

* [**Package `survival` - pbc data set**]{color="#0c2074"}

```{r example data, include=TRUE}
dt <- as.data.frame(pbc[1:5,c(1:6,11,12)])
kable(dt, "html", booktabs = TRUE, align = "c") %>%
kable_styling(position = "center", full_width = FALSE,
              bootstrap_options = c("striped")) %>% 
  row_spec(row = 0, color = "white", background = "#0c2074") 
```


## Practical Examples  {.triangledb}

* [**id**]{color="#e84720"}:	case number
* [**time**]{color="#e84720"}:	number of days between registration and the earlier of death, transplantation, or study analysis in July, 1986
* [**status**]{color="#e84720"}:	status at endpoint, 0/1/2 for censored, transplant, dead
* [**trt**]{color="#e84720"}:	1/2/NA for D-penicillamine, placebo, not randomised
* [**age**]{color="#e84720"}:	in years
* [**sex**]{color="#e84720"}:	m/f
* [**bili**]{color="#e84720"}:	serum bilirunbin (mg/dl)
* [**chol**]{color="#e84720"}:	serum cholesterol (mg/dl)

::: aside
More details: <https://stat.ethz.ch/R-manual/R-devel/library/survival/html/pbc.html>
:::



## Practical Examples  {.triangledb}

* What is a **scalar**/~~vector~~/~~matrix~~

```{r example data b, include=TRUE}
dt <- as.data.frame(pbc[1:5, c(1:6,11,12)])
dt <- format(dt, digits = 7)
dt %>%
 mutate(
   dt = row.names(.),
   age = cell_spec(age, "html", color = ifelse(age >= 70, "red", "black"), 
                   bold = ifelse(age >= 70, "TRUE", "FALSE"), align = c("c", rep("c", 4))),
   time = cell_spec(time, "html", align = c("c", rep("c", 4))),
   id = cell_spec(id, "html", align = c("c", rep("c", 4))),
   sex = cell_spec(sex, "html", align = c("c", rep("c", 4))),
   status = cell_spec(status, "html", align = c("c", rep("c", 4))),
   trt = cell_spec(trt, "html", align = c("c", rep("c", 4))),
   bili = cell_spec(bili, "html", align = c("c", rep("c", 4))),
   chol = cell_spec(chol, "html", align = c("c", rep("c", 4))),
   )%>%
#select(c(id, time, status, trt, age, sex, bili, chol)) %>%
kable("html", escape = FALSE, booktabs = TRUE, align = "c")  %>%
kable_styling(position = "center", full_width = FALSE,
              bootstrap_options = c("striped")) %>% 
  row_spec(row = 0, color = "white", background = "#0c2074")  
 
```


## Practical Examples {.triangledb} 

* What is a ~~scalar~~/**vector**/~~matrix~~

```{r example data c, include=TRUE}
dt <- as.data.frame(pbc[1:5,c(1:6,11,12)])
kable(dt, "html", booktabs = T, align = "c") %>%
 kable_styling(full_width = FALSE, bootstrap_options = c("striped")) %>%
 row_spec(row = 0, color = "white", background = "#0c2074")  %>% 
 column_spec(3, bold = TRUE, color = "red")
```


## Practical Examples  {.triangledb}

* What is a ~~scalar~~/**vector**/~~matrix~~

```{r example data d, include=TRUE}
dt <- as.data.frame(pbc[1:5,c(1:6,11,12)])
kable(dt, "html", booktabs = T, align = "c") %>%
 kable_styling(full_width = FALSE, bootstrap_options = c("striped")) %>%
 row_spec(row = 0, color = "white", background = "#0c2074")  %>%   
 column_spec(2, bold = TRUE, color = "red")
```


## Practical Examples  {.triangledb}

* What is a ~~scalar~~/~~vector~~/**matrix**

```{r example data e, include=TRUE}
dt <- as.data.frame(pbc[1:5,c(1:6,11,12)])
kable(dt, "html", booktabs = T, align = "c") %>%
 kable_styling(full_width = FALSE, bootstrap_options = c("striped")) %>%
 row_spec(row = 0, color = "white", background = "#0c2074")  %>% 
 column_spec(2:3, bold = TRUE, color = "red")
```


## Practical Examples  {.triangledb}

* What is a ~~scalar~~/~~vector~~/**matrix**

```{r example data f, include=TRUE}
dt <- as.data.frame(pbc[1:5,c(1:6,11,12)])
kable(dt, "html", booktabs = T, align = "c") %>%
 kable_styling(full_width = FALSE, bootstrap_options = c("striped")) %>%
 row_spec(row = 0, color = "white", background = "#0c2074")  %>% 
 column_spec(7:8, bold = TRUE, color = "red")
```


## Practical Examples  {.triangledb}

* **Common questions**
   - What is the average age?
   - What is the average serum bilirubin?
   - What is the average serum cholesterol?
   - What is the percentage of females?
   - How many missing values do we have for serum cholesterol?

<br>

::: {.boxspw}

**All these questions can be answered using R!**

:::


## Tips {.triangledb}

:::: {.boxspw}

* R is **case sensitive**, e.g.,
  - **`sex`** is different than **`Sex`**
* Commands are separated by a **semi-colon** or by a **newline**
* Comments can be put anywhere, starting with a hashmark **`#`**: everything to the end of the line is a comment
* Assign a value to an object by **`<-`** (or **`=`**)
* **Working directory**: get with `getwd()` and set with `setwd()`

::::




## Getting Familiar with R  {.triangledb}

* [**Missing values**]{color="#e84720"}
  - are coded as **`NA`** (i.e., not available) 
  - check for missingness **`is.na()`**
<br>  
* [**Infinity**]{color="#e84720"}
  - is coded as **`Inf`** (plus infinity) or **`-Inf`** (minus infinity) 
  - test: **`is.finite()`**

## Getting Familiar with R  {.triangledb}

* [**Null objects**]{color="#e84720"}
  - are coded as **`NULL`**
  - test: **`is.null()`**
<br>  
* [**Not a number**]{color="#e84720"}
  - is coded as **`NaN`** (Not a Number). Example: 
```{r, eval = TRUE, include = TRUE, echo = TRUE}
0/0
```



## Importing Data {.triangledb}

<br>

* function: **read.table()**, **read.csv()** and its variants

::: {.callout-note}
use forward slashes or double backward slashes in the file names, e.g., \
    `"C:/Documents and Settings/User/Data/file.txt"` or \
    `"C:\\Documents and Settings\\User\\Data\\file.txt"` \
or use raw character constants \
    `r"(C:\\Documents and Settings\\User\\Data\\file.txt)"`
:::
    
## Importing Data (cont'd) {.triangledb}
    
* Specialized functions for importing data from other programs
  - package: `foreign`, function: `read.spss()`, `read.dta()`
  - package: `Hmisc`, function: `sas.get()`
  - package: `openxlsx`, function: `read.xlsx()`  
  - package: `readxl`, function: `read_excel()`
  - package: `haven`, function: `read_spss()`
  - ~etc~


## Exporting Data {.triangledb}

<br>

* Specialized functions for exporting data to other programs
  - function: `write.table()`, `write.csv()`
  - package: `foreign`, function: `write.spss()`, `write.dta()`
  - package: `openxlsx`, function: `write.xlsx()`
  - *etc*


## Saving and Loading your Work  {.triangledb}

#### Multiple objects:

* You can save your R objects using `save()`
  - be careful about overwriting 
* You can load your saved R objects using `load()`

  
#### Single object:

* Using `saveRDS()` you can save a single R object 
* Using `readRDS()` you can load a single R object
  - we will need an assignment statement to store the results

<br>

## Saving and Loading your Work (cont'd)  {.triangledb}

<br>

::: {.boxspw}

[**Save your code by using the tab File in Rstudio!**]{color="#0c2074"}

:::  
  
## Saving and Loading your Work  {.triangledb}

### Tips:

* Use short but descriptive names
* Avoid using names that contain symbols
* Avoid spaces in names
* Make sure that any missing values in your data set are indicated with the same value (or no value), missingness should be documented!


## Summary {.triangledb}

:::: {.columns}
::: {.column width="47%"}

**Basic functions**

* `getwd()`, `setwd()`, 
* `is.na()`, `is.finite()`, `is.null()`
<p style="margin-bottom:5pt;"> </p>

:::



::: {.column width="47%"}

**Import/Export**

* `read.csv()`, `write.csv()`
* `read.xlsx()`, `write.xlsx()`
* `read.table()`, `write.table()`

:::

::::

::::: centered

:::: {.columns}


::: {.column width="47%"}

**Save/Load**

* `save()`, `saveRDS()`
* `load()`, `readRDS()`

:::

::::

:::::

# Common Objects in R {data-background="./templateassets/lbback.svg" class="center"}


## In this Section {.triangledb}

<br>

* Objects in R

* Data types

* Data structures


## Objects in R {.triangledb}

* In R Everything (data, results, ...) is an [**object**]{color="#e84720"}

* In order to **list** the created objects use the following functions
```{r, eval = FALSE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
objects()
ls()
```

<br>

. . .

* When you want to **remove** objects
```{r, eval = FALSE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
rm()
rm(list=ls(all=TRUE))
```


## Objects in R  {.triangledb}

* To investigate a specific object (e.g. pbc)
```{r, eval = TRUE, include = TRUE, echo = TRUE}
str(pbc[,c("id", "time", "status", "trt", "age", "sex", "bili", "chol")])
```


## Data Types {.triangledb}

The simplest data types are:

* [**`numeric`**]{colour="#0c2074"} : quantitative data
* [**`character`**]{colour="#0c2074"} : qualitative data (text)
* [**`integer`**]{colour="#0c2074"} : whole numbers
* [**`logical`**]{colour="#0c2074"} : TRUE or FALSE

## Data Types {.triangledb}

* There is a special data type [**`factors`**]{colour="#0c2074"} that is often used for  qualitative data 
  - That is data with a distinct small and fixed number of levels
  - Note that factors internaly are stored as integers

## Data Types in R {.triangledb}

To find out what type of object you have, you can use the following function
```{r, eval = TRUE, include = TRUE, echo = TRUE}
mode(pbc$age)
```

```{r, eval = TRUE, include = TRUE, echo = TRUE}
str(pbc$age)
```

## Data Structures  {.triangledb}

The most important data structures are:

  - [**Vectors:**]{colour="#0c2074"} have the same type of elements
  - [**Matrices:**]{colour="#0c2074"} have the same type of elements with the same length 
  - [**Arrays**]{colour="#0c2074"} have the same type of elements with the same length but can store the data in more than two dimensions
  - [**Data frames:**]{colour="#0c2074"} have elements of different type with the same length 
  - [**Lists:**]{colour="#0c2074"} have elements of different type and length 

## Data Structures  {.triangledb}

::: {.callout-note}
There is no seperate data structure for [**scalars**]{colour="#0c2074"}. Even single numbers are considered vectors! However sometimes a single number is still required! 
:::

## Data Structures  {.triangledb}

<br>
<br>

::: {.boxspw}

[**What do these data structures look like?**]{color="#0c2074"}

:::  




## Data Structures  

* Differences between **vector**, matrix, array, data.frame and list
```{r, eval = TRUE, include = TRUE, echo = TRUE}
pbc[1:6, c("age")]
```

## Data Structures  {.triangledb}

* Differences between vector, **matrix**, array, data.frame and list
```{r, eval = TRUE, include = TRUE, echo = TRUE}
cbind(pbc[1:6, c("age")],
   pbc[1:6, c("bili", "chol")])
```


## Data Structures  {.triangledb}

* Differences between vector, matrix, **array**, data.frame and list
```{r, eval = TRUE, include = TRUE, echo = TRUE}
pbc[1:3, c("age", "bili", "chol")]
pbc[4:6, c("age", "bili", "chol")]
```

## Data Structures  {.triangledb}

* Differences between vector, matrix, **array**, data.frame and list
```{r, eval = TRUE, include = TRUE, echo = TRUE}
pbc[1:2, c("protime", "time")]
pbc[3:4, c("protime", "time")]
```

## Data Structures  {.triangledb}

* Differences between vector, matrix, array, **data.frame** and list
```{r, eval = TRUE, include = TRUE, echo = TRUE}
pbc[1:6, c("id", "sex", "bili", "chol")]
```


## Data Structures  {.triangledb}

* Differences between vector, matrix, array, data.frame and **list**
```{r, eval = TRUE, include = TRUE, echo = TRUE}
pbc[1:6, c("sex")]
pbc[1:2, c("sex", "bili")]
pbc[1:4, c("age")]
```


## Data Structures in R {.triangledb}

<br>
<br>

::: {.boxspw}


[**Let's now create different data structures in R!**]{color="#0c2074"}

:::

## Data Structures in R  {.triangledb}

[**Create a vector**]{color="#0c2074"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
vec <- c(1, 2, 3, 4, 5)
vec
```
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
vec <- 1:5
vec
```



## Data Structures in R  {.triangledb}

[**Create a matrix**]{color="#0c2074"}

::: {.columns}

::: {.column width="47%"}


```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
vec <- c(1, 2, 3, 4, 5,
         6, 7, 8, 9)
mat <- matrix(data = vec, 
              nrow = 3,
              ncol = 3)
mat 
```

:::

::: {.column width="47%"}


```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
vec <- c(1, 2, 3, 4, 5,
         6, 7, 8, 9)
mat <- matrix(data = vec, 
              nrow = 3,
              ncol = 3, 
              byrow = TRUE)
mat
```

:::

:::

## Data Structures in R  {.triangledb}

[**Create an array**]{color="#0c2074"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
ar <- array(data = c(1, 2, 3, 4, 5, 6, 7, 8), dim = c(2, 2, 2))
ar
```


## Data Structures in R  {.triangledb}

[**Create an array**]{color="#0c2074"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
ar <- array(data = c(1, 2, 3, 4), dim = c(2, 2, 1))
ar
```


## Data Structures in R  {.triangledb}

[**Create a data frame**]{color="#0c2074"}


::: {.columns}

::: {.column width="47%"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
dtf <- data.frame(pbc[, "sex"], 
                  pbc[, "age"])
dtf[1:3, ]
```

:::

::: {.column width="47%"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
dtf <- data.frame(
            Gender = pbc[, "sex"], 
            Age = pbc[, "age"])
dtf[1:3, ]
```

:::

:::



## Data Structures in R  {.triangledb}

[**Create a list**]{color="#0c2074"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
list1 <- list(vec = c(1:5), mat = pbc[1:2, c("age", "sex")])
list1
```

## Class {.triangledb}

<br>

* In addition to a type objects have a **class**

<br>

* It indicates how the object can be used

<br>

* The behaviour of functions when used on the object may depend on the **class**

## Summary {.triangledb}

::::: {style="font-size: 75%;"}

:::: {.columns}

::: {.column width="47%"}

**Data types**

* `numeric`
* `character`
* `integer`
* `logical`
* `factors`

:::

::: {.column width="47%"}

**Data structures**

* `c()`
* `matrix()`
* `array()`
* `data.frame()`
* `list()`

:::

::::

:::: {.columns}

::: {.column width="47%"}

**Other**

* `mode()`
* `str()`

:::

::: {.column width="47%"}

**&nbsp;**

* `ls()`
* `objects()`


:::

::::

:::::

# Indexing and Subsetting {data-background="./templateassets/lbback.svg" class="center"}



## Indexing/Subsetting {.triangledb}

::::: {style="font-size: 95%;"}

* When transforming and analyzing data we often need to **select** specific [**observations**]{color="#afcc46"} or [**variables**]{color="#e84720"}
  - Examples: Select ...
      * [the age of the patient with the name 'John Harvey']{style="font-size: 90%;"}
      * [the 3rd element of vector age]{style="font-size: 90%;"}
      * [the 3rd column of the pbc data set]{style="font-size: 90%;"}
      * [the sex of the 10th patient]{style="font-size: 90%;"}
      * [all information of the 5th patient]{style="font-size: 90%;"}
      * [the serum cholesterol for all males]{style="font-size: 90%;"}
      * [the age for male patients or patients that have serum billirubin > 3]{style="font-size: 90%;"}
      * [the first measurement per patient]{style="font-size: 90%;"}
    
:::::

## Indexing/Subsetting {.triangledb}

![](.\\assets-day1\\mailboxes.svg){fig-align="center" height="460px" }

## Indexing/Subsetting  {.triangledb}

<br>

* This can be done using square brackets (`[ ]`) notation and indices
* Three basic types
  - **position** indexing
  - **logical** indexing
  - **name** indexing
  
  
## Indexing with `vectors` {.triangledb}

* For position indexing, use a [**positive**]{color="#afcc46"} value to select an element
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(6:17)
x
x[2]
```

* Use [**multiple positive**]{color="#afcc46"} values to select **multiple** elements
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x[c(2,3,4)]
```


## Indexing with `vectors` {.triangledb}

<br>

* For position indexing, use duplicated [**positive**]{color="#afcc46"} values to select the same elements
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(6:17)
x
x[c(2,2,2)]
```


## Indexing with `vectors` {.triangledb}

* For position indexing, use a [**negative**]{color="#e84720"} value to **remove** an element
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(6:17)
x
x[-5]
```

<br>

::: boxspw

[**Positive and negative indices cannot be combined**]{color="#0c2074"}

:::

## Indexing with `vectors` {.triangledb}

* Use **logical** index of the same length to select elements where the value is **TRUE**
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(6:10)
y <- c(TRUE, FALSE, FALSE, FALSE, FALSE)
x[y]
```


## Indexing with `vectors` {.triangledb}

* Use logical indexing in combination with conditions
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(6:10)
x[x > 7]
x[x > 7 & x > 9]
x[x > 7 | x > 9]
```


## Indexing with `vectors` {.triangledb}

* For **name/character** indexing, use the name of the element
```{r, eval = TRUE, include = TRUE, echo = TRUE}
x <- c(foo=5, bar=4, one=7, two=12, three=2)
x[c('foo', 'one')]
```

* Use the function `names` to obtain the names


## Indexing with a `matrix` {.triangledb}

* Indexing matrices is similar to indexing vectors but with double index

  - The first position denotes the rows `["index", ]`
  - The first position denotes the columns `[ , "index"]`
  
::: {.columns}


:::: {.column width="47%"}  

<br>

Example: select `M[3, 2]`

<br>

3rd row, second column

::::

:::: {.column width="47%"} 

$$
\begin{pmatrix}
11 & \color{blue}{\mathbf{12}} & 13 & 14 & 15 \\[6pt]
21 & \color{blue}{\mathbf{22}} & 23 & 24 & 25 \\[6pt]
\color{blue}{\mathbf{31}} & \color{red}{\mathbf{32}} & \color{blue}{\mathbf{33}} & \color{blue}{\mathbf{34}} & \color{blue}{\mathbf{35}} \\[6pt]
41 & \color{blue}{\mathbf{42}} & 43 & 44 & 45 \\[6pt]
51 & \color{blue}{\mathbf{52}} & 53 & 54 & 55
\end{pmatrix}
$$

::::

:::

## Indexing with a `matrix` {.triangledb}




::: {.columns}


:::: {.column width="47%"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2, ncol = 2)
mat
```  

* Use position indexing as:
```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2, ncol = 2)
mat[2, 2]
```  

::::

:::: {.column width="47%"}  

* Can use names:

```{r, eval = TRUE, include = TRUE, echo = TRUE}
rownames(mat) <- c("Patient1", "Patient2")
colnames(mat) <- c("Height", "Weight")
mat # display
```

* To access the Weight of Patient2:

```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat["Patient2", "Weight"]
```

::::

:::

## Indexing with a `matrix` {.triangledb}


::: {.callout-caution title="Using a single index on a matrix"}
Be cautious, it also works with a single index. In this case, the matrix is treated as a vector.
:::


```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2,
              ncol = 2)
mat[2]
mat[[2]]
```  




## Indexing with a `matrix` {.triangledb}


* When we leave a position blank all elements are selected
```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2,
              ncol = 2)
mat
mat[2, ]
```  

* Example with a logical index: select rows where first column > 1
  

```{r, eval = TRUE, include = TRUE, echo = TRUE}
logical_row_index <- mat[,1] > 1
logical_row_index
``` 

```{r , eval = TRUE, include = TRUE, echo = TRUE}
mat[logical_row_index, ]
```

## Indexing with a `matrix` {.triangledb}


* Be careful, when a single row or column is selected the result is converted to a vector
```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2,
              ncol = 2)
mat[2, ]
``` 
* use `drop=FALSE` to prevent this
```{r, eval = TRUE, include = TRUE, echo = TRUE}
mat <- matrix(data = 1:4, 
              nrow = 2,
              ncol = 2)
mat[2, , drop=FALSE]
```

## Indexing with `array` {.triangledb}

::: .columns


:::: {.column width="47%"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
ar <- array(data = 1:4, 
            dim = c(1, 2, 2))
ar
```  

::::

:::: {.column width="47%"}

```{r, eval = TRUE, include = TRUE, echo = TRUE}
ar[1, 1, ]
```  

::::

:::


## Indexing with `data.frame` {.triangledb}

* Works with **single** and **double** index

::: {.columns}


:::: {.column width="47%"}


```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
DF <- data.frame(x = 1:3, 
      y = c("male", 
            "male",
            "female"))
DF
```  

::::

:::: {.column width="47%"}

* Use position single indexing
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
DF[2]
DF[[2]]
```  


::::

:::


## Indexing with `data.frame` {.triangledb}

::: {.columns}


:::: {.column width="47%"}

* When using double index, indexing works like a matrix
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
DF <- data.frame(x = 1:3, 
      y = c("male", 
            "male", 
            "female"))
DF
```  

::::

:::: {.column width="47%"}

* Use position indexing
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
DF[2, ]
```  
* Use logical indexing
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
DF[DF$x < 2, ]
```  

::::

:::

## Indexing with `data.frame` {.triangledb}

* **`$`** provides a convenient notation to extract an element by name
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
head(pbc$time)
head(pbc[ ,"time"])
```  




## Indexing with `data.frames` {.triangledb}

* Combine logical and position indexing in data frame
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
head(pbc[pbc$sex == "m", 1:7])
```  


## Indexing with `data.frames` {.triangledb}

* Combine logical and position indexing in data frame
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
head(pbc[pbc$age > 30 | 
         pbc$sex == "f",
         1:7])
```  


## Indexing with `data.frames` {.triangledb}

* Combine logical and position indexing in data frame
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
head(pbc[pbc$age > 30 & 
         pbc$sex == "f",
         1:7])
``` 


## Indexing with `lists` {.triangledb}

* Lists can be subsetted in the same way as vectors using single brackets - Note that the output is a list

<br>

* Use position indexing
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
mylist <- list(y = c(14, 45), z = c("m", "f", "f"))
mylist[2]
```  



## Indexing with `lists` {.triangledb}

* Double square brackets can be also used - Note that the output is a vector

<br>

* Use position indexing
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
mylist <- list(y = c(14, 45),
               z = c("m", "f", "f"))
mylist[[2]]
```  


## Indexing with `lists` {.triangledb}

* **`$`** provides a convenient notation to extract an element by name - Note that the output is a vector
```{r, eval = TRUE, include = TRUE, echo = TRUE}
#| code-line-numbers: false
mylist <- list(y = c(14, 45),
               z = c("m", "f", "f"))
mylist
mylist$y
```  



## Summary {.triangledb}

:::: {.columns}

::: {.column width="47%"}

### Vectors
* `[]`
* `[""]` - for categorical variables

:::

::: {.column width="47%"}

### Matrices

* `[ , ]`
* `[[]]`, `[]`

:::

::::

:::: {.columns}

::: {.column width="30%"}

### Arrays

* `[ , , ]`

:::

::: {.column width="30%"}

### Data frames

* `[,]`
* `[[]]`, `[]`
* `$`

:::


::: {.column width="30%"}

### Lists

* `[]`
* `[[]]`
* `$`

:::

::::

